name: Fetch ICON-RUC GRIB2 and Generate PNGs

on:
  workflow_dispatch:

jobs:
  # ------------------- STEP 1: Set RUN and DATE -------------------
  set_run_date:
    runs-on: ubuntu-latest
    outputs:
      run: ${{ steps.set_run_date_step.outputs.run }}
      date: ${{ steps.set_run_date_step.outputs.date }}
    steps:
      - name: Set RUN and DATE (hourly)
        id: set_run_date_step
        run: |
          HOUR=$(date -u +%H)
          DATE=$(date -u +%Y-%m-%d)
          RUN=$HOUR

          echo "RUN=$RUN" >> $GITHUB_ENV
          echo "DATE=$DATE" >> $GITHUB_ENV

          echo "run=$RUN" >> $GITHUB_OUTPUT
          echo "date=$DATE" >> $GITHUB_OUTPUT

          echo "Current UTC time: $HOUR -> RUN=$RUN, DATE=$DATE"

      # Download grid (einmalig)
      - name: Download ICON unstructured grid
        run: |
          mkdir -p data/grid
          wget -q http://icon-downloads.mpimet.mpg.de/grids/public/edzw/icon_grid_0047_R19B07_L.nc -O data/grid/grid.nc
          echo "✅ ICON grid heruntergeladen"

  # ------------------- STEP 2: Parallel jobs via MATRIX -------------------
  generate_pngs:
    needs: set_run_date
    runs-on: ubuntu-latest
    strategy:
      matrix:
        datatype: [t2m, ww, tp, dbz_cmax]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Download GRIB2 files for ${{ matrix.datatype }}
        run: |
          mkdir -p data/${{ matrix.datatype }}
          cd data/${{ matrix.datatype }}
          # Für WW ist die Sequenz 1-14, sonst 0-13
          if [ "${{ matrix.datatype }}" = "ww" ]; then MAX=14; START=1; else MAX=13; START=0; fi
          seq $START $MAX | xargs -n 1 -P 4 -I{} bash -c '
            i_padded=$(printf "%03d" {})
            URL="https://opendata.dwd.de/weather/nwp/v1/m/icon-d2-ruc/p/${{ matrix.datatype }}/r/${{ needs.set_run_date.outputs.date }}T${{ needs.set_run_date.outputs.run }}:00/s/PT${i_padded}H00M.grib2"
            wget -q -O ${matrix.datatype}_${i_padded}.grib2 "$URL" || echo "Datei $URL nicht verfügbar, überspringe..."
          '

      - name: Generate PNGs for ${{ matrix.datatype }}
        run: |
          mkdir -p iconruc/${{ needs.set_run_date.outputs.run }}/${{ matrix.datatype }}
          python scripts/generate_pngs.py data/${{ matrix.datatype }} iconruc/${{ needs.set_run_date.outputs.run }}/${{ matrix.datatype }} ${{ matrix.datatype }} data/grid/grid.nc

      - name: Upload PNGs artifact for ${{ matrix.datatype }}
        uses: actions/upload-artifact@v4
        with:
          name: iconruc-${{ matrix.datatype }}
          path: iconruc/${{ needs.set_run_date.outputs.run }}/${{ matrix.datatype }}

  # ------------------- STEP 3: Deploy to R2 -------------------
  deploy_to_r2:
    needs: generate_pngs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Download all PNG artifacts
        uses: actions/download-artifact@v4
        with:
          name: iconruc-t2m
          path: iconruc/t2m
      - uses: actions/download-artifact@v4
        with:
          name: iconruc-ww
          path: iconruc/ww
      - uses: actions/download-artifact@v4
        with:
          name: iconruc-tp
          path: iconruc/tp
      - uses: actions/download-artifact@v4
        with:
          name: iconruc-dbz_cmax
          path: iconruc/dbz_cmax

      - name: Generate Metadata
        run: |
          python scripts/generate_metadata.py iconruc/${{ needs.set_run_date.outputs.run }} ${{ needs.set_run_date.outputs.run }} ${{ needs.set_run_date.outputs.date }}

      - name: Clean old runs on R2 except current
        run: |
          for run_folder in $(aws s3 ls s3://${{ secrets.R2_BUCKET }}/icon-ruc/ --endpoint-url https://${{ secrets.R2_ACCOUNT_ID }}.r2.cloudflarestorage.com | awk '{print $2}' | sed 's#/##'); do
            if [ "$run_folder" != "${{ needs.set_run_date.outputs.run }}/" ]; then
              aws s3 rm s3://${{ secrets.R2_BUCKET }}/icon-ruc/$run_folder --recursive --endpoint-url https://${{ secrets.R2_ACCOUNT_ID }}.r2.cloudflarestorage.com
            fi
          done
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}

      - name: Upload current run and metadata.json to R2
        run: |
          aws s3 sync ./iconruc/${{ needs.set_run_date.outputs.run }}/ s3://${{ secrets.R2_BUCKET }}/icon-ruc/${{ needs.set_run_date.outputs.run }}/ \
            --endpoint-url https://${{ secrets.R2_ACCOUNT_ID }}.r2.cloudflarestorage.com
          aws s3 cp ./iconruc/metadata.json s3://${{ secrets.R2_BUCKET }}/icon-ruc/metadata.json \
            --endpoint-url https://${{ secrets.R2_ACCOUNT_ID }}.r2.cloudflarestorage.com
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
