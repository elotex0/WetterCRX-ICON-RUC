name: Fetch ICON-RUC GRIB2 and Generate PNGs

on:
  workflow_dispatch:

jobs:
  fetch_and_generate:
    runs-on: ubuntu-latest
    outputs:
      run: ${{ steps.set_run_date.outputs.run }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache Python packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Set RUN and DATE (hourly)
        id: set_run_date
        run: |
          HOUR=$(date -u +%H)
          DATE=$(date -u +%Y-%m-%d)
          RUN=$HOUR

          echo "RUN=$RUN" >> $GITHUB_ENV
          echo "DATE=$DATE" >> $GITHUB_ENV

          echo "run=$RUN" >> $GITHUB_OUTPUT
          echo "date=$DATE" >> $GITHUB_OUTPUT

          echo "Current UTC time: $HOUR -> RUN=$RUN, DATE=$DATE"

      # ðŸ†• NEU: Grid-Datei herunterladen
      - name: Download ICON unstructured grid
        run: |
          mkdir -p data/grid
          wget -q http://icon-downloads.mpimet.mpg.de/grids/public/edzw/icon_grid_0047_R19B07_L.nc -O data/grid/grid.nc
          echo "âœ… ICON grid heruntergeladen"

      - name: Download t2m GRIB2 files
        run: |
          mkdir -p data/t2m
          cd data/t2m
          seq 0 13 | xargs -n 1 -P 4 -I{} bash -c '
            i_padded=$(printf "%03d" {} )
            URL="https://opendata.dwd.de/weather/nwp/v1/m/icon-d2-ruc/p/T_2M/r/${DATE}T${RUN}:00/s/PT${i_padded}H00M.grib2"
            wget -q -O t2m_${i_padded}.grib2 "$URL" || echo "Datei $URL nicht verfÃ¼gbar, Ã¼berspringe..."
          '

      - name: Download ww GRIB2 files
        run: |
          mkdir -p data/ww
          cd data/ww
          seq 1 14 | xargs -n 1 -P 4 -I{} bash -c '
            i_padded=$(printf "%03d" {} )
            URL="https://opendata.dwd.de/weather/nwp/v1/m/icon-d2-ruc/p/WW/r/${DATE}T${RUN}:00/s/PT${i_padded}H00M.grib2"
            wget -q -O ww_${i_padded}.grib2 "$URL" || echo "Datei $URL nicht verfÃ¼gbar, Ã¼berspringe..."
          '

      - name: Download tp GRIB2 files
        run: |
          mkdir -p data/tp
          cd data/tp
          seq 0 13 | xargs -n 1 -P 4 -I{} bash -c '
            i_padded=$(printf "%03d" {} )
            URL="https://opendata.dwd.de/weather/nwp/v1/m/icon-d2-ruc/p/TOT_PREC_D/r/${DATE}T${RUN}:00/s/PT${i_padded}H00M.grib2"
            wget -q -O tot_prec_${i_padded}.grib2 "$URL" || echo "Datei $URL nicht verfÃ¼gbar, Ã¼berspringe..."
          '

      - name: Generate PNGs
        run: |
          mkdir -p iconruc/$RUN/t2m
          mkdir -p iconruc/$RUN/ww
          mkdir -p iconruc/$RUN/tp

          python scripts/generate_pngs.py data/t2m iconruc/$RUN/t2m t2m data/grid/grid.nc
          python scripts/generate_pngs.py data/ww iconruc/$RUN/ww ww data/grid/grid.nc
          python scripts/generate_pngs.py data/tp iconruc/$RUN/tp tp data/grid/grid.nc

      # ðŸ§¹ Grid-Datei & GRIBs lÃ¶schen (Platz sparen)
      - name: Clean up temporary data
        run: |
          echo "ðŸ§¹ Entferne temporÃ¤re Dateien..."
          rm -rf data/

      - name: Upload PNGs as artifact (for debugging)
        uses: actions/upload-artifact@v4
        with:
          name: iconruc
          path: iconruc


  deploy_to_r2:
    runs-on: ubuntu-latest
    needs: fetch_and_generate
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Download PNGs artifact
        uses: actions/download-artifact@v4
        with:
          name: iconruc
          path: ./iconruc

      - name: Generate Metadata
        run: |
          python scripts/generate_metadata.py iconruc/${{ needs.fetch_and_generate.outputs.run }} ${{ needs.fetch_and_generate.outputs.run }} ${{ env.DATE }}

      - name: Clean old runs on R2 except current
        run: |
          for run_folder in $(aws s3 ls s3://${{ secrets.R2_BUCKET }}/icon-ruc/ --endpoint-url https://${{ secrets.R2_ACCOUNT_ID }}.r2.cloudflarestorage.com | awk '{print $2}' | sed 's#/##'); do
            if [ "$run_folder" != "${{ needs.fetch_and_generate.outputs.run }}/" ]; then
              aws s3 rm s3://${{ secrets.R2_BUCKET }}/icon-ruc/$run_folder --recursive --endpoint-url https://${{ secrets.R2_ACCOUNT_ID }}.r2.cloudflarestorage.com
            fi
          done
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}

      - name: Upload current run and metadata.json to R2
        run: |
          aws s3 sync ./iconruc/${{ needs.fetch_and_generate.outputs.run }}/ s3://${{ secrets.R2_BUCKET }}/icon-ruc/${{ needs.fetch_and_generate.outputs.run }}/ \
            --endpoint-url https://${{ secrets.R2_ACCOUNT_ID }}.r2.cloudflarestorage.com

          aws s3 cp ./iconruc/metadata.json s3://${{ secrets.R2_BUCKET }}/icon-ruc/metadata.json \
            --endpoint-url https://${{ secrets.R2_ACCOUNT_ID }}.r2.cloudflarestorage.com
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
